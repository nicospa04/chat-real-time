generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  conversations    Conversation[] @relation(fields: [conversationIds], references: [id])
  conversationIds String[] @db.ObjectId


  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id])
  seenMessageIds String[] @db.ObjectId


  accounts Account[]
  messages Message[]

}

model Account {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    type String
    provider String
    providerAccountId String
    refreshToken String? @db.String
    accessToken String? @db.String
    expiresAt DateTime? 
    tokenType String? 
    scope String?
    idToken String? @db.String
    sessionState String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String @db.ObjectId

    @@unique([provider, providerAccountId])
    
}

model Conversation {
      id            String    @id @default(auto()) @map("_id") @db.ObjectId
      createdAt    DateTime  @default(now())
      lastMessageAt DateTime @default(now())
      name String?
      isGroup Boolean?

      messagesIds String[] @db.ObjectId
      messages Message[]

      userId String[] @db.ObjectId
      user User[] @relation(fields: [userId], references: [id])
}

model Message {
        id            String    @id @default(auto()) @map("_id") @db.ObjectId
        body String?
        image String?
        createdAt    DateTime  @default(now())

        seenIds String[] @db.ObjectId
        seen User[] @relation("Seen", fields: [seenIds], references: [id])    

        conversationId String @db.ObjectId
        conversation Conversation @relation(fields:[conversationId], references: [id], onDelete:Cascade)

        senderId String @db.ObjectId
        sender User @relation(fields: [senderId], references: [id], onDelete:Cascade)
}